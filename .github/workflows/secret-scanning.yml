name: Secret Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  trufflehog-scan:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for TruffleHog

      - name: Run TruffleHog scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

  gitleaks-scan:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  detect-secrets:
    name: Detect Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install detect-secrets
        run: pip install detect-secrets

      - name: Run detect-secrets scan
        run: |
          # Create baseline if it doesn't exist
          if [ ! -f .secrets.baseline ]; then
            detect-secrets scan --baseline .secrets.baseline
          fi
          # Audit new secrets
          detect-secrets scan --baseline .secrets.baseline --exclude-files 'package-lock.json|node_modules/.*'

  custom-api-key-check:
    name: Custom API Key Pattern Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Google API Keys
        run: |
          echo "Scanning for exposed Google API keys..."
          if grep -rE "AIzaSy[a-zA-Z0-9_-]{33}" \
            --include="*.py" \
            --include="*.js" \
            --include="*.mjs" \
            --include="*.ts" \
            --include="*.tsx" \
            --include="*.env" \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            .; then
            echo "‚ùå ERROR: Google API key pattern detected in code!"
            echo "Please remove hardcoded API keys and use environment variables instead."
            exit 1
          else
            echo "‚úÖ No Google API key patterns detected."
          fi

      - name: Check for AWS Keys
        run: |
          echo "Scanning for exposed AWS keys..."
          if grep -rE "(AKIA|A3T|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}" \
            --include="*.py" \
            --include="*.js" \
            --include="*.mjs" \
            --include="*.ts" \
            --include="*.tsx" \
            --include="*.env" \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            .; then
            echo "‚ùå ERROR: AWS key pattern detected in code!"
            exit 1
          else
            echo "‚úÖ No AWS key patterns detected."
          fi

      - name: Check for Private Keys
        run: |
          echo "Scanning for private keys..."
          if grep -rE "-----BEGIN (RSA |DSA |EC |OPENSSH )?PRIVATE KEY-----" \
            --include="*.py" \
            --include="*.js" \
            --include="*.mjs" \
            --include="*.ts" \
            --include="*.tsx" \
            --include="*.pem" \
            --include="*.key" \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            .; then
            echo "‚ùå ERROR: Private key detected in code!"
            exit 1
          else
            echo "‚úÖ No private keys detected."
          fi

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [trufflehog-scan, gitleaks-scan, detect-secrets, custom-api-key-check]
    if: always()
    steps:
      - name: Report Results
        run: |
          echo "## üîí Security Scan Results"
          echo "All security scans completed."
          echo "Check individual job results above for details."
